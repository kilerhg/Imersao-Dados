# -*- coding: utf-8 -*-
"""Aula03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10avRjyn43T4-gpmIWFnML8EI86O4R15G

## Aula01
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

fonte = "https://github.com/alura-cursos/imersao-dados-2-2020/blob/master/MICRODADOS_ENEM_2019_SAMPLE_43278.csv?raw=true"

dados = pd.read_csv(fonte)
dados.head()

dados.shape

dados["SG_UF_RESIDENCIA"]

dados.columns.values

dados[["SG_UF_RESIDENCIA", "Q025"]]

dados["SG_UF_RESIDENCIA"]

dados["SG_UF_RESIDENCIA"].unique()

len(dados["SG_UF_RESIDENCIA"].unique())

dados["SG_UF_RESIDENCIA"].value_counts()

dados["NU_IDADE"].value_counts()

dados["NU_IDADE"].value_counts().sort_index()

dados["NU_IDADE"].hist()

dados["NU_IDADE"].hist(bins = 20, figsize = (10,8))



dados.query("IN_TREINEIRO == 1")["NU_IDADE"].value_counts().sort_index()

dados["NU_NOTA_REDACAO"].hist(bins = 20, figsize=(8, 6))

dados["NU_NOTA_LC"].hist(bins = 20, figsize=(8, 6))

dados["NU_NOTA_REDACAO"].mean()

dados["NU_NOTA_REDACAO"].std()

provas = ["NU_NOTA_CN","NU_NOTA_CH","NU_NOTA_MT","NU_NOTA_LC","NU_NOTA_REDACAO"]

dados[provas].describe()

dados["NU_NOTA_LC"].quantile(0.1)

dados["NU_NOTA_LC"].plot.box(grid = True, figsize=(8,6))

dados[provas].boxplot(grid=True, figsize= (10,8))

"""Desafio01: Proporção dos inscritos por idade.

Desafio02: Descobrir de quais estados são os inscritos com 13 anos.

Desafio03: Adicionar título no gráfico

Desafio04: Plotar os Histogramas das idades dos do treineiro e não treineiros.

Desafio05: Comparar as distribuições das provas em inglês espanhol

Desafio06: Explorar a documentações e visualizações com matplotlib ou pandas e gerar novas visualizações.

## Aula 02
"""

dados.query("NU_IDADE == 13")

dados.query("NU_IDADE <= 14")["SG_UF_RESIDENCIA"].value_counts()

dados.query("NU_IDADE <= 14")["SG_UF_RESIDENCIA"].value_counts(normalize=True)

alunos_menor_quartoze = dados.query("NU_IDADE <= 14")
alunos_menor_quartoze["SG_UF_RESIDENCIA"].value_counts().plot.pie(figsize=(10,8))

alunos_menor_quartoze["SG_UF_RESIDENCIA"].value_counts(normalize = True).plot.bar(figsize=(10,8))

len(alunos_menor_quartoze)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
sns.boxplot(x="Q006", y = "NU_NOTA_MT", data = dados)
plt.title("Boxplot das notas de matemática pela renda")

renda_ordenada = dados["Q006"].unique()
renda_ordenada.sort()

renda_ordenada

plt.figure(figsize=(10, 6))
sns.boxplot(x="Q006", y = "NU_NOTA_MT", data = dados, order = renda_ordenada)
plt.title("Boxplot das notas de matemática pela renda")

dados[provas].sum()

dados["NU_NOTA_TOTAL"] = dados[provas].sum(axis=1)
dados["NU_NOTA_TOTAL"]

plt.figure(figsize=(10, 6))
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados, order = renda_ordenada)
plt.title("Boxplot das notas de total pela renda")

sns.displot(dados, x ="NU_NOTA_TOTAL")

provas = ["NU_NOTA_CN","NU_NOTA_CH","NU_NOTA_MT","NU_NOTA_LC","NU_NOTA_REDACAO"]
provas.append("NU_NOTA_TOTAL")
dados[provas].query("NU_NOTA_TOTAL == 0")

dados_sem_notas_zero = dados.query("NU_NOTA_TOTAL != 0")
dados_sem_notas_zero.head()

plt.figure(figsize=(10, 6))
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados_sem_notas_zero, order = renda_ordenada)
plt.title("Boxplot das notas de total pela renda")

plt.figure(figsize=(14, 8))
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados_sem_notas_zero, 
            hue = "IN_TREINEIRO", order = renda_ordenada)
plt.title("Boxplot das notas de total pela renda")

"""MEGA DESAFIO DA THAINÁ: Pegar a amostra completa dos alunos de 13 e 14 anos

Desafio do Gui bonzinho: aumentar a amostra para alunos menor de idade e compara a proporção por estado.

Desafio 3: Criar uma função para plotar o boxplot do seaborn

Desafio 4: Verificar se quem zerou a prova foi eliminado ou não estava presente

Desafio 5: Quem é eliminado tira zero ou será NaN (não teve registro de notas)

DEsafio 6: Verificar a proporção dos participantes de rendas mais altas e mais baixas como treineiro e não treineiro.

Desafio 7: Fazer o mesmo boxplot olhando para a questão 25 (tem internet ou não) e fazer uma reflexão sobre o assunto e o contexto de pandemia.

## Aula 03
"""

plt.figure(figsize=(12,8))
sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL")

plt.figure(figsize=(12,8))
sns.histplot(dados_sem_zerar ,x = "NU_NOTA_MT")

plt.figure(figsize=(12,8))
sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL", hue="Q025", kde=True)

plt.figure(figsize=(12,8))
sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL", hue="Q025", kde=True, stat="probability")

plt.figure(figsize=(12,8))
sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL", hue="Q025", kde=True, stat="probability", cumulative=True)

plt.figure(figsize=(14,14))
sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC")
plt.xlim((-50,1050))
plt.ylim((-50,1050))

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas])

correlacao = dados_sem_notas_zero[provas].corr()
correlacao

sns.heatmap(correlacao, cmap="Blues",center=0, annot=True)

"""Desafio 01: plotar as medias, medianas e moda nas notas de LC e MT(matplotlib linha vertical)

Desafio 02: plotar matriz correlação utilizando a matriz diagonal do seaborn

Desafio 03: Filtraras notas do seu estado, e comparar as notas do estado com o brasil

Desafio 04: Criar uma conclusão sobre a correlação etnre as notas totais de matematica e linguagem

Desafio 05: Recriar alguns graficos com titulo legenda e nome dos campos X e Y

Desafio 06: Brincar com as coorelações referentes a classe de renda, Masculino Feminino

Desafio 07: Complementar o desafio 05, melhorando visualmente os graficos

Desafio 01
"""

plt.figure(figsize=(12,8))
plt.title('Notas Enem 2019 Com informações Adicionais')
media = dados_sem_zerar["NU_NOTA_TOTAL"].mean()
mediana = dados_sem_zerar["NU_NOTA_TOTAL"].median()
moda = dados_sem_zerar["NU_NOTA_TOTAL"].mode()
grafico_d1 = sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL", kde=True)
grafico_d1.axvline(linewidth=2, color='g', x=media, linestyle='dashed')
grafico_d1.axvline(linewidth=2, x=mediana,color='b')
for xv in moda:
  grafico_d1.axvline(linewidth=2, color='r', x=xv)
grafico_d1.legend(labels=('Grafico','Mediana','Media','Moda','Moda','Moda'))
grafico_d1.set_xlabel('Nota TOTAL')
grafico_d1.set_ylabel('Contagem')

"""Desafio 02"""

plt.figure(figsize=(10,8))
plt.title('Grafico demonstrando a Correlação entre as notas do enem')
sns.set_theme(style="darkgrid")
mask = np.triu(np.ones_like(correlacao, dtype=bool))
grafico_d2 = sns.heatmap(correlacao, cmap="Dark2",center=0, annot=True,square=True,linewidths=.5, mask=mask)
grafico_d2.set_xlabel('Nota das provas')
grafico_d2.set_ylabel('Nota das provas')

plt.figure(figsize=(10,8))
plt.title('Grafico demonstrando a Correlação entre as notas do enem')
sns.set_theme(style="darkgrid")
mask = np.triu(np.ones_like(correlacao, dtype=bool))
grafico_d2 = sns.heatmap(correlacao, cmap="Dark2",center=0, annot=True,square=True,linewidths=.5, mask=mask)
grafico_d2.set_xlabel('Nota das provas')
grafico_d2.set_ylabel('Nota das provas')
materias = ['Ciencias da Natureza','Ciencias Humanas','Matematica','Linguagens e codigos','Redação']
materias1 = ['','Ciencias Humanas','Matematica','Linguagens e codigos','Redação','Total Notas']
grafico_d2.set_xticklabels(materias)
grafico_d2.set_yticklabels(materias1)

"""Desafio 03"""

dados_sp = dados_sem_notas_zero.query("SG_UF_RESIDENCIA == 'SP'")
plt.figure(figsize=(14,10))
plt.title('Comparação Notas São paulo e Brasil ENEM 2019')
sns.histplot(dados_sp ,x = "NU_NOTA_TOTAL", kde=True, stat="density",color='red')
graficod3 = sns.histplot(dados_sem_zerar ,x = "NU_NOTA_TOTAL", kde=True, stat="density")
graficod3.legend(labels=('Linha São Paulo','Linha Brasil','Área São Paulo','Área Brasil'))
graficod3.set_xlabel("Nota Total do Participante")
graficod3.set_ylabel("Densidade / Proporção de Notas")

classes = dados_sem_notas_zero["Q006"].unique()
classes.sort()
classes

"""Desafio 04"""

plt.figure(figsize=(14,14))
plt.title('Correlação entre as Notas de Mátematica & Linguagem e código ENEM 2019')
graficod4 = sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC",hue="Q006", hue_order=classes)
graficod4.set_xlabel('Nota de Mátematica')
graficod4.set_ylabel('Nota de Linguagem e código')
graficod4.legend(title=' Renda Sendo\n A menor Renda &\n Q Maior Renda')

plt.xlim((350,1050))
plt.ylim((300,1050))

"""Conclusão Desafio 04 : as notas dos candidatos sobem conforme a renda, como está no grafico, porem existem outros elementos como as pessoas que tem notas em alguma materia consideravelmente elevadas acompanham a outra materia, provavelmente pelo fator que estas pessoas dedicaram um tempo para estudar, e estudaram uniformimente todas as materias, principalmente as de maior renda, onde podem gozar de um tempo & dinheiro para dedicar-se completamente ao estudo.

Desafio 5 * foi realizado durante os outros desafios

Desafio 6
"""

plt.figure(figsize=(14,14))
plt.title('Correlação entre as Notas de Mátematica & Linguagem e código ENEM 2019')
graficod4 = sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC",hue="TP_SEXO")
graficod4.set_xlabel('Nota de Mátematica')
graficod4.set_ylabel('Nota de Linguagem e código')
graficod4.legend(title='Sexo',labels=('','Masculino','Feminino'))

plt.xlim((350,1050))
plt.ylim((300,1050))

"""Desafio 06 p2"""

plt.figure(figsize=(14,14))
plt.title('Correlação entre as Notas de Mátematica & Linguagem e código ENEM 2019')
graficod4 = sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC",hue="TP_COR_RACA",palette='Dark2')
graficod4.set_xlabel('Nota de Mátematica')
graficod4.set_ylabel('Nota de Linguagem e código')
graficod4.legend(title='Cor/Raça',labels=('','Não Declarado','Branca','Preta','Parda','Amarela','Indígena'))
plt.xlim((350,1050))
plt.ylim((300,1050))

"""Desafio 06 p3"""

plt.figure(figsize=(14,14))
plt.title('Correlação entre as Notas de Mátematica & Linguagem e código ENEM 2019')
graficod4 = sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC",hue="TP_ESCOLA",palette='Dark2')
graficod4.set_xlabel('Nota de Mátematica')
graficod4.set_ylabel('Nota de Linguagem e código')
graficod4.legend(title='Tipo de escola do Ensino Médio',labels=('','Não Respondeu','Publica','Privada'))

plt.xlim((350,1050))
plt.ylim((300,1050))

"""Desafio 06 p4:"""

plt.figure(figsize=(14,14))
plt.title('Correlação entre as Notas de Mátematica & Linguagem e código ENEM 2019')
graficod4 = sns.scatterplot(data = dados_sem_notas_zero,x="NU_NOTA_MT",y="NU_NOTA_LC",hue="Q025",palette='Dark2')
graficod4.set_xlabel('Nota de Mátematica')
graficod4.set_ylabel('Nota de Linguagem e código')
graficod4.legend(title='Tem Acesso a internet em casa',labels=('','Sim','Não'))

plt.xlim((350,1050))
plt.ylim((300,1050))

"""Desafio 06 p5"""

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas],corner=True)

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas],diag_kind="kde",corner=True)

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas],kind='hist')

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas],kind='hist',corner=True)

grafico_grandao = sns.pairplot(dados_sem_notas_zero[provas],
    plot_kws=dict(marker="+", linewidth=.5),
    diag_kws=dict(fill=False),
    corner=True
)

"""Desafio 07 Realizado Durante os desafios"""